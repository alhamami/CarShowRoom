{
	"info": {
		"_postman_id": "663afcf2-83c9-4634-bcb5-90e154573dc6",
		"name": "Car Show Room REST API",
		"description": "# Car Showroom Management API Collection\n\nThis collection provides a complete set of endpoints to manage car showrooms and their inventory of cars. The API enables creating, retrieving, updating, and deleting car showroom and car information. Use these endpoints to manage data for car showrooms, including showroom details, car information, and association between cars and showrooms.\n\n## Collection Structure\n\nThe collection is organized into the following folders:\n\n- **Car Showroom APIs**: Endpoints for managing car showroom data, including:\n    \n    - **Create Car Showroom**: Add a new showroom with details such as name, commercial registration number, manager name, contact number, and address.\n        \n    - **List Car Showrooms**: Retrieve all showrooms with pagination and sorting options.\n        \n    - **Get Car Showroom by ID**: Fetch detailed information for a specific showroom by ID.\n        \n    - **Update Car Showroom**: Modify details of an existing showroom, such as manager name, contact number, and address.\n        \n    - **Delete Car Showroom**: Soft delete a showroom, which will no longer appear in list results.\n        \n- **Car APIs**: Endpoints for managing car information within showrooms, including:\n    \n    - **Add Car to Showroom**: Add a new car to a specific showroom, providing details like VIN, maker, model, model year, and price.\n        \n    - **List Cars with Showroom Details**: Retrieve a list of cars with showroom information, with options for filtering by maker, model, year, and showroom.\n        \n\n## How to Use This Collection\n\n1. **Set up the** **`base_url`** **variable** in the collection to your APIâ€™s base endpoint (e.g., `https://yourapi.com` or `http://localhost:8080`).\n    \n2. **Use the example request bodies and parameters** provided within each request to test various functionalities of the API.\n    \n3. **Send requests and review responses**: Use the \"Send\" button in Postman to execute requests, and check the response and status codes to ensure the API behaves as expected.\n    \n\n### Response Codes\n\n- **200 OK**: The request was successful, and the response includes the requested data.\n    \n- **201 Created**: A resource was successfully created.\n    \n- **204 No Content**: The request was successful, but there is no content to return.\n    \n- **400 Bad Request**: The request could not be understood or was missing required parameters.\n    \n- **404 Not Found**: The requested resource could not be found.\n    \n- **500 Internal Server Error**: An error occurred on the server.\n    \n\n## Example Usage\n\nTo get started:\n\n1. Use **Create Car Showroom** to add a new showroom.\n    \n2. Use **Add Car to Showroom** to add cars to a specific showroom.\n    \n3. Explore other requests like **List Cars with Showroom Details** to retrieve detailed lists and perform advanced queries.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26222143"
	},
	"item": [
		{
			"name": "CarShowRoom",
			"item": [
				{
					"name": "List Car Showrooms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/showrooms?page=0&size=3&sort=name,asc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "3"
								},
								{
									"key": "sort",
									"value": "name,asc"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Car Showrooms By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/showrooms/2222",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms",
								"2222"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Car Showroom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n      \"name\": \"Premium Motors\",\n      \"commercial_registration_number\": \"1548458843\",\n      \"manager_name\": \"Jalal Alhamami\",\n      \"contact_number\": \"966555555555\",\n      \"address\": \"Riyadh\"\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/showrooms",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Car Show Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n    \"contact_number\": \"966555555555\",\n    \"manager_name\": \"Jalal Alhamami\",\n    \"address\": \"Riyadh\"\n  }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/showrooms/2222",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms",
								"2222"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Soft Delete Car Show Room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/showrooms/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms",
								"1"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Car",
			"item": [
				{
					"name": "Create Car",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\n      \"vin\": \"1HGCM82633A123456\",\n      \"maker\": \"Honda\",\n      \"model\": \"Accord\",\n      \"model_year\": 2021,\n      \"price\": 98500.91\n  }\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/showrooms/2222/cars",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"showrooms",
								"2222",
								"cars"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Cars with Show room",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/carsWithShowRoom?carShowRoom=1111&maker=Nissan&model=Corolla&year=2020&page=0&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"carsWithShowRoom"
							],
							"query": [
								{
									"key": "carShowRoom",
									"value": "1111"
								},
								{
									"key": "maker",
									"value": "Nissan"
								},
								{
									"key": "model",
									"value": "Corolla"
								},
								{
									"key": "year",
									"value": "2020"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}